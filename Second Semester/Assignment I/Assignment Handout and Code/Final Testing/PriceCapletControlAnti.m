function Price = PriceCapletControlAnti(t1,K)
%PriceCaplet Returns the price of a caplet using Monte-Carlo Simulation
%   ADWOLA002 - Tomi Adewusi 
%--------------------------------------------------------------------------
%% Data
%--------------------------------------------------------------------------
% Bond prices for T_0 to T_{N+1}
Bstar=[1.000000000000000 0.931733068514009 0.867336864194859 0.807180507606257 0.751390186399840 ...
    0.699924481765438 0.652631479135652 0.609290924427683 0.569644566898682 0.533417438303370 ...
    0.500332340416184 0.470119346466237 0.442521711052162 0.417299242183633 0.394229917259718 ...
    0.373110314043405 0.353755267713142 0.335997045644106 0.319684243642614 0.304680543400063 ...
    0.290863424934260 0.278122895071373];

% Forward Rates derived from the bond Prices 
fstar = [0.070000000000000 0.071163908099692 0.071749550745182 ...
    0.071750938523962 0.071287420411181 0.070454753142712 ...
    0.069338979002964 0.068001160258291 0.066491256944801 ...
    0.064864780213725 0.063149485640679 0.061384231031525 ...
    0.059591220846755 0.057770455086370 0.055955240441108 ...
    0.054162230256338 0.052391424532061 0.050648374383400 ...
    0.048927528695231 0.047239989697800 0.045596859621355];

alpha = 0.084987000000019;
sigma = 0.025512300000002;
r0 = 0.07;
n = 9000;  
t0 = 0;
t2 = t1+1;
Yt0 = t0;
Z = randn(2,n,2);
Z1 = Z(1,:,1);
Z2 = Z(2,:,1);
Z3 = Z(1,:,2);
Z4 = Z(2,:,2);
%--------------------------------------------------------------------------
%% Useful Inline functions
%--------------------------------------------------------------------------
A = @(t1,t2)  (1./alpha).*(1-exp(-alpha.*(t2-t1)));

C = @(t1,t2) log(Bstar(t2+1)./Bstar(t1+1)) ...
    + fstar(t1+1).*A(t1,t2) ...
    - ((sigma.^2)/(4*alpha)).*(1-exp(-2*alpha.*t1)).*A(t1,t2).^2 ;

D = @(t) (sigma^2./(2*alpha.^2)) .* ...
    (  1-exp(-alpha.*t).*(1+alpha.*A(zeros(size(t)),t))  ) ...
    + fstar(t+1) ...
    - r0.*exp(-alpha.*t) ;

sigma_Y = @(t1,t2) sqrt((sigma.^2/alpha.^2) .*...
    ((t2 - t1) - A(t1,t2) - 0.5.*alpha.*A(t1,t2).^2 ));

sigma_r =@(t1,t2) sqrt((sigma.^2/(2*alpha)).*(1-exp(-2*alpha.*(t2-t1))));

sigma_rY = @(t1,t2) (0.5.*sigma.^2).*A(t1,t2).^2;

rho_rY = @(t1,t2) (sigma_rY(t1,t2))./( sigma_r(t1,t2).*sigma_Y(t1,t2) );
mu_r =@(t1,t2,rt1) exp(-alpha.*(t2-t1)).*rt1 + D(t2) ...
    -exp(-alpha.*(t2-t1)).*D(t1);

mu_Y =@(t1,t2,Yt1,rt1) Yt1 + A(t1,t2).*rt1 + ...
    0.5.*sigma_Y(t1,t2).^2 - C(t1,t2);
%--------------------------------------------------------------------------
%% Joint realisations for the short rate and discount factors for time T
%--------------------------------------------------------------------------
rt1 = mu_r(t0,t1,r0) + sigma_r(t0,t1).*Z1;
Yt1 = mu_Y(t0,t1,Yt0,r0) + sigma_Y(t0,t1).*...
    (rho_rY(t0,t1).*Z1 + sqrt(1-rho_rY(t0,t1).^2).*Z2 );
Yt2 = mu_Y(t1,t2,Yt1,rt1) + sigma_Y(t1,t2).*...
    (rho_rY(t1,t2).*Z3 + sqrt(1-rho_rY(t1,t2).^2).*Z4 );
Beta_t2 = exp(-Yt2);
Bt1t2 = exp(A(t1,t2).*rt1 - C(t1,t2));
sample1  = Beta_t2.*max(Bt1t2-1-K,0);
%--------------------------------------------------------------------------
% Repeating for the Antithetic 
rt1 = mu_r(t0,t1,r0) + sigma_r(t0,t1).*-Z1;
Yt1 = mu_Y(t0,t1,Yt0,r0) + sigma_Y(t0,t1).*...
    (rho_rY(t0,t1).*-Z1 + sqrt(1-rho_rY(t0,t1).^2).*-Z2 );
Yt2 = mu_Y(t1,t2,Yt1,rt1) + sigma_Y(t1,t2).*...
    (rho_rY(t1,t2).*-Z3 + sqrt(1-rho_rY(t1,t2).^2).*-Z4 );
Beta_t2_I = exp(-Yt2);
Bt1t2_I = exp(A(t1,t2).*rt1 - C(t1,t2));
sample2  = Beta_t2_I.*max(Bt1t2_I-1-K,0);
%--------------------------------------------------------------------------
sample1 = 0.5.*(sample1+sample2); 
Bt1t2 = 0.5.*(Bt1t2+Bt1t2_I); 
helper = cov(sample1(1:900),Bt1t2(1:900));
alpha_opt = -helper(2,1)/helper(2,2);
exact = exp(-C(t1,t2)+A(t1,t2).*mu_r(t0,t1,r0)...
             +0.5*(A(t1,t2)*sigma_r(0,t1)).^2 );
Price = mean(sample1 + alpha_opt.*(Bt1t2-exact));
%--------------------------------------------------------------------------
%% Computation of the Bond Price
%--------------------------------------------------------------------------

end